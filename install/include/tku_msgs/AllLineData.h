// Generated by gencpp from file tku_msgs/AllLineData.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_ALLLINEDATA_H
#define TKU_MSGS_MESSAGE_ALLLINEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tku_msgs/LineData.h>

namespace tku_msgs
{
template <class ContainerAllocator>
struct AllLineData_
{
  typedef AllLineData_<ContainerAllocator> Type;

  AllLineData_()
    : all_LineData()  {
    }
  AllLineData_(const ContainerAllocator& _alloc)
    : all_LineData(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::tku_msgs::LineData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tku_msgs::LineData_<ContainerAllocator> >::other >  _all_LineData_type;
  _all_LineData_type all_LineData;





  typedef boost::shared_ptr< ::tku_msgs::AllLineData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::AllLineData_<ContainerAllocator> const> ConstPtr;

}; // struct AllLineData_

typedef ::tku_msgs::AllLineData_<std::allocator<void> > AllLineData;

typedef boost::shared_ptr< ::tku_msgs::AllLineData > AllLineDataPtr;
typedef boost::shared_ptr< ::tku_msgs::AllLineData const> AllLineDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::AllLineData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::AllLineData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::AllLineData_<ContainerAllocator1> & lhs, const ::tku_msgs::AllLineData_<ContainerAllocator2> & rhs)
{
  return lhs.all_LineData == rhs.all_LineData;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::AllLineData_<ContainerAllocator1> & lhs, const ::tku_msgs::AllLineData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::AllLineData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::AllLineData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::AllLineData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::AllLineData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::AllLineData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::AllLineData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::AllLineData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c89c4722901f5abc77d01bb5fa2b88a2";
  }

  static const char* value(const ::tku_msgs::AllLineData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc89c4722901f5abcULL;
  static const uint64_t static_value2 = 0x77d01bb5fa2b88a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::AllLineData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/AllLineData";
  }

  static const char* value(const ::tku_msgs::AllLineData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::AllLineData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LineData[] all_LineData\n"
"\n"
"================================================================================\n"
"MSG: tku_msgs/LineData\n"
"float32 Line_theta\n"
"int16 Line_length\n"
"Cooridinate start_point\n"
"Cooridinate end_point\n"
"Cooridinate center_point\n"
"float32 relative_distance\n"
"Cooridinate Nearest_point\n"
"\n"
"================================================================================\n"
"MSG: tku_msgs/Cooridinate\n"
"int16 x\n"
"int16 y\n"
;
  }

  static const char* value(const ::tku_msgs::AllLineData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::AllLineData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.all_LineData);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AllLineData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::AllLineData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::AllLineData_<ContainerAllocator>& v)
  {
    s << indent << "all_LineData[]" << std::endl;
    for (size_t i = 0; i < v.all_LineData.size(); ++i)
    {
      s << indent << "  all_LineData[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tku_msgs::LineData_<ContainerAllocator> >::stream(s, indent + "    ", v.all_LineData[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_ALLLINEDATA_H
