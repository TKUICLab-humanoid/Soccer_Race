// Generated by gencpp from file tku_msgs/BGRValue.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_BGRVALUE_H
#define TKU_MSGS_MESSAGE_BGRVALUE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tku_msgs
{
template <class ContainerAllocator>
struct BGRValue_
{
  typedef BGRValue_<ContainerAllocator> Type;

  BGRValue_()
    : BValue(0)
    , GValue(0)
    , RValue(0)  {
    }
  BGRValue_(const ContainerAllocator& _alloc)
    : BValue(0)
    , GValue(0)
    , RValue(0)  {
  (void)_alloc;
    }



   typedef int16_t _BValue_type;
  _BValue_type BValue;

   typedef int16_t _GValue_type;
  _GValue_type GValue;

   typedef int16_t _RValue_type;
  _RValue_type RValue;





  typedef boost::shared_ptr< ::tku_msgs::BGRValue_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::BGRValue_<ContainerAllocator> const> ConstPtr;

}; // struct BGRValue_

typedef ::tku_msgs::BGRValue_<std::allocator<void> > BGRValue;

typedef boost::shared_ptr< ::tku_msgs::BGRValue > BGRValuePtr;
typedef boost::shared_ptr< ::tku_msgs::BGRValue const> BGRValueConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::BGRValue_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::BGRValue_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::BGRValue_<ContainerAllocator1> & lhs, const ::tku_msgs::BGRValue_<ContainerAllocator2> & rhs)
{
  return lhs.BValue == rhs.BValue &&
    lhs.GValue == rhs.GValue &&
    lhs.RValue == rhs.RValue;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::BGRValue_<ContainerAllocator1> & lhs, const ::tku_msgs::BGRValue_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::BGRValue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::BGRValue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::BGRValue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::BGRValue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::BGRValue_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::BGRValue_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::BGRValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e44fde246936bf182ab7600000dc57b";
  }

  static const char* value(const ::tku_msgs::BGRValue_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e44fde246936bf1ULL;
  static const uint64_t static_value2 = 0x82ab7600000dc57bULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::BGRValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/BGRValue";
  }

  static const char* value(const ::tku_msgs::BGRValue_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::BGRValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 BValue\n"
"int16 GValue\n"
"int16 RValue\n"
"\n"
"\n"
;
  }

  static const char* value(const ::tku_msgs::BGRValue_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::BGRValue_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.BValue);
      stream.next(m.GValue);
      stream.next(m.RValue);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BGRValue_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::BGRValue_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::BGRValue_<ContainerAllocator>& v)
  {
    s << indent << "BValue: ";
    Printer<int16_t>::stream(s, indent + "  ", v.BValue);
    s << indent << "GValue: ";
    Printer<int16_t>::stream(s, indent + "  ", v.GValue);
    s << indent << "RValue: ";
    Printer<int16_t>::stream(s, indent + "  ", v.RValue);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_BGRVALUE_H
