// Generated by gencpp from file tku_msgs/SensorSet.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_SENSORSET_H
#define TKU_MSGS_MESSAGE_SENSORSET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tku_msgs
{
template <class ContainerAllocator>
struct SensorSet_
{
  typedef SensorSet_<ContainerAllocator> Type;

  SensorSet_()
    : Roll(0)
    , Pitch(0)
    , Yaw(0)
    , GainRoll(0)
    , GainPitch(0)
    , GainKP(0)
    , GainKD(0)
    , DesireSet(false)
    , IMUReset(false)
    , ForceState(false)
    , GainSet(false)  {
    }
  SensorSet_(const ContainerAllocator& _alloc)
    : Roll(0)
    , Pitch(0)
    , Yaw(0)
    , GainRoll(0)
    , GainPitch(0)
    , GainKP(0)
    , GainKD(0)
    , DesireSet(false)
    , IMUReset(false)
    , ForceState(false)
    , GainSet(false)  {
  (void)_alloc;
    }



   typedef int32_t _Roll_type;
  _Roll_type Roll;

   typedef int32_t _Pitch_type;
  _Pitch_type Pitch;

   typedef int32_t _Yaw_type;
  _Yaw_type Yaw;

   typedef int32_t _GainRoll_type;
  _GainRoll_type GainRoll;

   typedef int32_t _GainPitch_type;
  _GainPitch_type GainPitch;

   typedef int32_t _GainKP_type;
  _GainKP_type GainKP;

   typedef int32_t _GainKD_type;
  _GainKD_type GainKD;

   typedef uint8_t _DesireSet_type;
  _DesireSet_type DesireSet;

   typedef uint8_t _IMUReset_type;
  _IMUReset_type IMUReset;

   typedef uint8_t _ForceState_type;
  _ForceState_type ForceState;

   typedef uint8_t _GainSet_type;
  _GainSet_type GainSet;





  typedef boost::shared_ptr< ::tku_msgs::SensorSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::SensorSet_<ContainerAllocator> const> ConstPtr;

}; // struct SensorSet_

typedef ::tku_msgs::SensorSet_<std::allocator<void> > SensorSet;

typedef boost::shared_ptr< ::tku_msgs::SensorSet > SensorSetPtr;
typedef boost::shared_ptr< ::tku_msgs::SensorSet const> SensorSetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::SensorSet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::SensorSet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::SensorSet_<ContainerAllocator1> & lhs, const ::tku_msgs::SensorSet_<ContainerAllocator2> & rhs)
{
  return lhs.Roll == rhs.Roll &&
    lhs.Pitch == rhs.Pitch &&
    lhs.Yaw == rhs.Yaw &&
    lhs.GainRoll == rhs.GainRoll &&
    lhs.GainPitch == rhs.GainPitch &&
    lhs.GainKP == rhs.GainKP &&
    lhs.GainKD == rhs.GainKD &&
    lhs.DesireSet == rhs.DesireSet &&
    lhs.IMUReset == rhs.IMUReset &&
    lhs.ForceState == rhs.ForceState &&
    lhs.GainSet == rhs.GainSet;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::SensorSet_<ContainerAllocator1> & lhs, const ::tku_msgs::SensorSet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::SensorSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::SensorSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::SensorSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::SensorSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::SensorSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::SensorSet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::SensorSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c13fdf5a7d05959108eed5391a02dd9";
  }

  static const char* value(const ::tku_msgs::SensorSet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c13fdf5a7d05959ULL;
  static const uint64_t static_value2 = 0x108eed5391a02dd9ULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::SensorSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/SensorSet";
  }

  static const char* value(const ::tku_msgs::SensorSet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::SensorSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 Roll\n"
"int32 Pitch\n"
"int32 Yaw\n"
"int32 GainRoll\n"
"int32 GainPitch\n"
"int32 GainKP\n"
"int32 GainKD\n"
"bool DesireSet\n"
"bool IMUReset\n"
"bool ForceState\n"
"bool GainSet\n"
;
  }

  static const char* value(const ::tku_msgs::SensorSet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::SensorSet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Roll);
      stream.next(m.Pitch);
      stream.next(m.Yaw);
      stream.next(m.GainRoll);
      stream.next(m.GainPitch);
      stream.next(m.GainKP);
      stream.next(m.GainKD);
      stream.next(m.DesireSet);
      stream.next(m.IMUReset);
      stream.next(m.ForceState);
      stream.next(m.GainSet);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorSet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::SensorSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::SensorSet_<ContainerAllocator>& v)
  {
    s << indent << "Roll: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Roll);
    s << indent << "Pitch: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Pitch);
    s << indent << "Yaw: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Yaw);
    s << indent << "GainRoll: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GainRoll);
    s << indent << "GainPitch: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GainPitch);
    s << indent << "GainKP: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GainKP);
    s << indent << "GainKD: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GainKD);
    s << indent << "DesireSet: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DesireSet);
    s << indent << "IMUReset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IMUReset);
    s << indent << "ForceState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ForceState);
    s << indent << "GainSet: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GainSet);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_SENSORSET_H
