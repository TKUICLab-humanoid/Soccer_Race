# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tku_msgs/SensorSet.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SensorSet(genpy.Message):
  _md5sum = "6c13fdf5a7d05959108eed5391a02dd9"
  _type = "tku_msgs/SensorSet"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 Roll
int32 Pitch
int32 Yaw
int32 GainRoll
int32 GainPitch
int32 GainKP
int32 GainKD
bool DesireSet
bool IMUReset
bool ForceState
bool GainSet
"""
  __slots__ = ['Roll','Pitch','Yaw','GainRoll','GainPitch','GainKP','GainKD','DesireSet','IMUReset','ForceState','GainSet']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Roll,Pitch,Yaw,GainRoll,GainPitch,GainKP,GainKD,DesireSet,IMUReset,ForceState,GainSet

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorSet, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Roll is None:
        self.Roll = 0
      if self.Pitch is None:
        self.Pitch = 0
      if self.Yaw is None:
        self.Yaw = 0
      if self.GainRoll is None:
        self.GainRoll = 0
      if self.GainPitch is None:
        self.GainPitch = 0
      if self.GainKP is None:
        self.GainKP = 0
      if self.GainKD is None:
        self.GainKD = 0
      if self.DesireSet is None:
        self.DesireSet = False
      if self.IMUReset is None:
        self.IMUReset = False
      if self.ForceState is None:
        self.ForceState = False
      if self.GainSet is None:
        self.GainSet = False
    else:
      self.Roll = 0
      self.Pitch = 0
      self.Yaw = 0
      self.GainRoll = 0
      self.GainPitch = 0
      self.GainKP = 0
      self.GainKD = 0
      self.DesireSet = False
      self.IMUReset = False
      self.ForceState = False
      self.GainSet = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7i4B().pack(_x.Roll, _x.Pitch, _x.Yaw, _x.GainRoll, _x.GainPitch, _x.GainKP, _x.GainKD, _x.DesireSet, _x.IMUReset, _x.ForceState, _x.GainSet))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.Roll, _x.Pitch, _x.Yaw, _x.GainRoll, _x.GainPitch, _x.GainKP, _x.GainKD, _x.DesireSet, _x.IMUReset, _x.ForceState, _x.GainSet,) = _get_struct_7i4B().unpack(str[start:end])
      self.DesireSet = bool(self.DesireSet)
      self.IMUReset = bool(self.IMUReset)
      self.ForceState = bool(self.ForceState)
      self.GainSet = bool(self.GainSet)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7i4B().pack(_x.Roll, _x.Pitch, _x.Yaw, _x.GainRoll, _x.GainPitch, _x.GainKP, _x.GainKD, _x.DesireSet, _x.IMUReset, _x.ForceState, _x.GainSet))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.Roll, _x.Pitch, _x.Yaw, _x.GainRoll, _x.GainPitch, _x.GainKP, _x.GainKD, _x.DesireSet, _x.IMUReset, _x.ForceState, _x.GainSet,) = _get_struct_7i4B().unpack(str[start:end])
      self.DesireSet = bool(self.DesireSet)
      self.IMUReset = bool(self.IMUReset)
      self.ForceState = bool(self.ForceState)
      self.GainSet = bool(self.GainSet)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7i4B = None
def _get_struct_7i4B():
    global _struct_7i4B
    if _struct_7i4B is None:
        _struct_7i4B = struct.Struct("<7i4B")
    return _struct_7i4B
